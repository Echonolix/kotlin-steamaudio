// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class IPLReflectionsBakeParams(
    public val `$mem`: MemorySegment,
) {
    public var scene: IPLScene
        get() = IPLReflectionsBakeParams.sceneHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLReflectionsBakeParams.sceneHandle.set(this.`$mem`, 0L, value)
        }

    public var probeBatch: IPLProbeBatch
        get() = IPLReflectionsBakeParams.probeBatchHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLReflectionsBakeParams.probeBatchHandle.set(this.`$mem`, 0L, value)
        }

    public var sceneType: IPLSceneType
        get() = IPLSceneType.fromInt(
            IPLReflectionsBakeParams.sceneTypeHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            IPLReflectionsBakeParams.sceneTypeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var identifier: IPLBakedDataIdentifier
        get() =
            IPLBakedDataIdentifier(
                IPLReflectionsBakeParams.identifierHandle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.identifier.`$mem`, 0L,
                IPLBakedDataIdentifier.layout.byteSize()
            )
        }

    public var bakeFlags: IPLReflectionsBakeFlags
        get() =
            IPLReflectionsBakeFlags.fromInt(
                IPLReflectionsBakeParams.bakeFlagsHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            IPLReflectionsBakeParams.bakeFlagsHandle.set(this.`$mem`, 0L, value.value)
        }

    public var numRays: IPLint32
        get() = IPLReflectionsBakeParams.numRaysHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLReflectionsBakeParams.numRaysHandle.set(this.`$mem`, 0L, value)
        }

    public var numDiffuseSamples: IPLint32
        get() = IPLReflectionsBakeParams.numDiffuseSamplesHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLReflectionsBakeParams.numDiffuseSamplesHandle.set(this.`$mem`, 0L, value)
        }

    public var numBounces: IPLint32
        get() = IPLReflectionsBakeParams.numBouncesHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLReflectionsBakeParams.numBouncesHandle.set(this.`$mem`, 0L, value)
        }

    public var simulatedDuration: IPLfloat32
        get() = IPLReflectionsBakeParams.simulatedDurationHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLReflectionsBakeParams.simulatedDurationHandle.set(this.`$mem`, 0L, value)
        }

    public var savedDuration: IPLfloat32
        get() = IPLReflectionsBakeParams.savedDurationHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLReflectionsBakeParams.savedDurationHandle.set(this.`$mem`, 0L, value)
        }

    public var order: IPLint32
        get() = IPLReflectionsBakeParams.orderHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLReflectionsBakeParams.orderHandle.set(this.`$mem`, 0L, value)
        }

    public var numThreads: IPLint32
        get() = IPLReflectionsBakeParams.numThreadsHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLReflectionsBakeParams.numThreadsHandle.set(this.`$mem`, 0L, value)
        }

    public var rayBatchSize: IPLint32
        get() = IPLReflectionsBakeParams.rayBatchSizeHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLReflectionsBakeParams.rayBatchSizeHandle.set(this.`$mem`, 0L, value)
        }

    public var irradianceMinDistance: IPLfloat32
        get() = IPLReflectionsBakeParams.irradianceMinDistanceHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLReflectionsBakeParams.irradianceMinDistanceHandle.set(this.`$mem`, 0L, value)
        }

    public var bakeBatchSize: IPLint32
        get() = IPLReflectionsBakeParams.bakeBatchSizeHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLReflectionsBakeParams.bakeBatchSizeHandle.set(this.`$mem`, 0L, value)
        }

    public var openCLDevice: IPLOpenCLDevice
        get() = IPLReflectionsBakeParams.openCLDeviceHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLReflectionsBakeParams.openCLDeviceHandle.set(this.`$mem`, 0L, value)
        }

    public var radeonRaysDevice: IPLRadeonRaysDevice
        get() = IPLReflectionsBakeParams.radeonRaysDeviceHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLReflectionsBakeParams.radeonRaysDeviceHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLReflectionsBakeParams.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("scene"),
            `$RuntimeHelper`.POINTER.withName("probeBatch"),
            ValueLayout.JAVA_INT.withName("sceneType"),
            IPLBakedDataIdentifier.layout.withName("identifier"),
            ValueLayout.JAVA_INT.withName("bakeFlags"),
            ValueLayout.JAVA_INT.withName("numRays"),
            ValueLayout.JAVA_INT.withName("numDiffuseSamples"),
            ValueLayout.JAVA_INT.withName("numBounces"),
            ValueLayout.JAVA_FLOAT.withName("simulatedDuration"),
            ValueLayout.JAVA_FLOAT.withName("savedDuration"),
            ValueLayout.JAVA_INT.withName("order"),
            ValueLayout.JAVA_INT.withName("numThreads"),
            ValueLayout.JAVA_INT.withName("rayBatchSize"),
            ValueLayout.JAVA_FLOAT.withName("irradianceMinDistance"),
            ValueLayout.JAVA_INT.withName("bakeBatchSize"),
            `$RuntimeHelper`.POINTER.withName("openCLDevice"),
            `$RuntimeHelper`.POINTER.withName("radeonRaysDevice"),
        ).withName("IPLReflectionsBakeParams")

        @JvmField
        public val sceneHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("scene"))

        @JvmField
        public val probeBatchHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("probeBatch"))

        @JvmField
        public val sceneTypeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("sceneType"))

        @JvmField
        public val identifierHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("identifier"))

        @JvmField
        public val bakeFlagsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("bakeFlags"))

        @JvmField
        public val numRaysHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("numRays"))

        @JvmField
        public val numDiffuseSamplesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("numDiffuseSamples"))

        @JvmField
        public val numBouncesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("numBounces"))

        @JvmField
        public val simulatedDurationHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("simulatedDuration"))

        @JvmField
        public val savedDurationHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("savedDuration"))

        @JvmField
        public val orderHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("order"))

        @JvmField
        public val numThreadsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("numThreads"))

        @JvmField
        public val rayBatchSizeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("rayBatchSize"))

        @JvmField
        public val irradianceMinDistanceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("irradianceMinDistance"))

        @JvmField
        public val bakeBatchSizeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("bakeBatchSize"))

        @JvmField
        public val openCLDeviceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("openCLDevice"))

        @JvmField
        public val radeonRaysDeviceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("radeonRaysDevice"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLReflectionsBakeParams =
            IPLReflectionsBakeParams(alloc.allocate(IPLReflectionsBakeParams.layout))
    }
}
