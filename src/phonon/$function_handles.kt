// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.FunctionDescriptor
import java.lang.foreign.Linker
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle

internal val `iplContextCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplContextCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplContextRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplContextRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplContextRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplContextRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplCalculateRelativeDirection$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplCalculateRelativeDirection"),
        FunctionDescriptor.of(
            IPLVector3.layout,
            `$RuntimeHelper`.POINTER,
            IPLVector3.layout,
            IPLVector3.layout,
            IPLVector3.layout,
            IPLVector3.layout,
        )
    )

internal val `iplSerializedObjectCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSerializedObjectCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSerializedObjectRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSerializedObjectRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSerializedObjectRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSerializedObjectRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSerializedObjectGetSize$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSerializedObjectGetSize"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_LONG,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSerializedObjectGetData$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSerializedObjectGetData"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplEmbreeDeviceCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplEmbreeDeviceCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplEmbreeDeviceRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplEmbreeDeviceRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplEmbreeDeviceRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplEmbreeDeviceRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplOpenCLDeviceListCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplOpenCLDeviceListCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplOpenCLDeviceListRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplOpenCLDeviceListRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplOpenCLDeviceListRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplOpenCLDeviceListRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplOpenCLDeviceListGetNumDevices$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplOpenCLDeviceListGetNumDevices"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplOpenCLDeviceListGetDeviceDesc$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplOpenCLDeviceListGetDeviceDesc"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplOpenCLDeviceCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplOpenCLDeviceCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplOpenCLDeviceCreateFromExisting$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplOpenCLDeviceCreateFromExisting"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplOpenCLDeviceRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplOpenCLDeviceRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplOpenCLDeviceRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplOpenCLDeviceRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplRadeonRaysDeviceCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplRadeonRaysDeviceCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplRadeonRaysDeviceRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplRadeonRaysDeviceRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplRadeonRaysDeviceRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplRadeonRaysDeviceRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplTrueAudioNextDeviceCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplTrueAudioNextDeviceCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplTrueAudioNextDeviceRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplTrueAudioNextDeviceRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplTrueAudioNextDeviceRelease$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplTrueAudioNextDeviceRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplSceneCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSceneCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSceneRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSceneRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSceneRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSceneRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSceneLoad$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSceneLoad"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSceneSave$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSceneSave"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSceneSaveOBJ$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSceneSaveOBJ"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSceneCommit$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSceneCommit"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplStaticMeshCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplStaticMeshCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplStaticMeshRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplStaticMeshRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplStaticMeshRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplStaticMeshRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplStaticMeshLoad$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplStaticMeshLoad"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplStaticMeshSave$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplStaticMeshSave"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplStaticMeshAdd$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplStaticMeshAdd"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplStaticMeshRemove$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplStaticMeshRemove"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplInstancedMeshCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplInstancedMeshCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplInstancedMeshRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplInstancedMeshRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplInstancedMeshRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplInstancedMeshRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplInstancedMeshAdd$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplInstancedMeshAdd"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplInstancedMeshRemove$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplInstancedMeshRemove"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplInstancedMeshUpdateTransform$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplInstancedMeshUpdateTransform"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            IPLMatrix4x4.layout,
        )
    )

internal val `iplAudioBufferAllocate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplAudioBufferAllocate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        ValueLayout.JAVA_INT,
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplAudioBufferFree$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplAudioBufferFree"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplAudioBufferInterleave$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplAudioBufferInterleave"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplAudioBufferDeinterleave$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplAudioBufferDeinterleave"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplAudioBufferMix$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplAudioBufferMix"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplAudioBufferDownmix$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplAudioBufferDownmix"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplAudioBufferConvertAmbisonics$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAudioBufferConvertAmbisonics"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplHRTFCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplHRTFCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplHRTFRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplHRTFRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplHRTFRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplHRTFRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplPanningEffectCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplPanningEffectCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplPanningEffectRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplPanningEffectRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplPanningEffectRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplPanningEffectRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplPanningEffectReset$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplPanningEffectReset"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplPanningEffectApply$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplPanningEffectApply"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplBinauralEffectCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplBinauralEffectCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplBinauralEffectRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplBinauralEffectRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplBinauralEffectRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplBinauralEffectRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplBinauralEffectReset$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplBinauralEffectReset"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplBinauralEffectApply$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplBinauralEffectApply"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplVirtualSurroundEffectCreate$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplVirtualSurroundEffectCreate"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplVirtualSurroundEffectRetain$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplVirtualSurroundEffectRetain"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplVirtualSurroundEffectRelease$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplVirtualSurroundEffectRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplVirtualSurroundEffectReset$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplVirtualSurroundEffectReset"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplVirtualSurroundEffectApply$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplVirtualSurroundEffectApply"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsEncodeEffectCreate$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsEncodeEffectCreate"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsEncodeEffectRetain$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsEncodeEffectRetain"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsEncodeEffectRelease$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsEncodeEffectRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsEncodeEffectReset$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsEncodeEffectReset"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsEncodeEffectApply$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsEncodeEffectApply"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsPanningEffectCreate$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsPanningEffectCreate"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsPanningEffectRetain$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsPanningEffectRetain"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsPanningEffectRelease$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsPanningEffectRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsPanningEffectReset$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsPanningEffectReset"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsPanningEffectApply$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsPanningEffectApply"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsBinauralEffectCreate$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsBinauralEffectCreate"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsBinauralEffectRetain$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsBinauralEffectRetain"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsBinauralEffectRelease$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsBinauralEffectRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsBinauralEffectReset$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsBinauralEffectReset"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsBinauralEffectApply$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsBinauralEffectApply"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsRotationEffectCreate$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsRotationEffectCreate"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsRotationEffectRetain$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsRotationEffectRetain"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsRotationEffectRelease$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsRotationEffectRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsRotationEffectReset$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsRotationEffectReset"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsRotationEffectApply$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsRotationEffectApply"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsDecodeEffectCreate$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsDecodeEffectCreate"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsDecodeEffectRetain$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsDecodeEffectRetain"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsDecodeEffectRelease$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsDecodeEffectRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsDecodeEffectReset$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsDecodeEffectReset"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAmbisonicsDecodeEffectApply$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplAmbisonicsDecodeEffectApply"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplDirectEffectCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplDirectEffectCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplDirectEffectRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplDirectEffectRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplDirectEffectRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplDirectEffectRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplDirectEffectReset$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplDirectEffectReset"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplDirectEffectApply$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplDirectEffectApply"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplReflectionEffectCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplReflectionEffectCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplReflectionEffectRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplReflectionEffectRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplReflectionEffectRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplReflectionEffectRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplReflectionEffectReset$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplReflectionEffectReset"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplReflectionEffectApply$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplReflectionEffectApply"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplReflectionMixerCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplReflectionMixerCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplReflectionMixerRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplReflectionMixerRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplReflectionMixerRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplReflectionMixerRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplReflectionMixerReset$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplReflectionMixerReset"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplReflectionMixerApply$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplReflectionMixerApply"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplPathEffectCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplPathEffectCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplPathEffectRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplPathEffectRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplPathEffectRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplPathEffectRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplPathEffectReset$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplPathEffectReset"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplPathEffectApply$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplPathEffectApply"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeArrayCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeArrayCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeArrayRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeArrayRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeArrayRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeArrayRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeArrayGenerateProbes$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeArrayGenerateProbes"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeArrayGetNumProbes$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeArrayGetNumProbes"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeArrayGetProbe$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeArrayGetProbe"),
    FunctionDescriptor.of(
        IPLSphere.layout,
        `$RuntimeHelper`.POINTER,
        ValueLayout.JAVA_INT,
    )
)

internal val `iplProbeBatchCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeBatchCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeBatchRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeBatchRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeBatchRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeBatchRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeBatchLoad$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeBatchLoad"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeBatchSave$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeBatchSave"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeBatchGetNumProbes$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeBatchGetNumProbes"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeBatchAddProbe$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeBatchAddProbe"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        IPLSphere.layout,
    )
)

internal val `iplProbeBatchAddProbeArray$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeBatchAddProbeArray"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeBatchRemoveProbe$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeBatchRemoveProbe"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        ValueLayout.JAVA_INT,
    )
)

internal val `iplProbeBatchCommit$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeBatchCommit"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeBatchRemoveData$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeBatchRemoveData"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplProbeBatchGetDataSize$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplProbeBatchGetDataSize"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_LONG,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplReflectionsBakerBake$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplReflectionsBakerBake"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplReflectionsBakerCancelBake$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplReflectionsBakerCancelBake"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplPathBakerBake$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplPathBakerBake"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplPathBakerCancelBake$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplPathBakerCancelBake"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSimulatorCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSimulatorCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSimulatorRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSimulatorRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSimulatorRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSimulatorRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSimulatorSetScene$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSimulatorSetScene"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSimulatorAddProbeBatch$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSimulatorAddProbeBatch"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSimulatorRemoveProbeBatch$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSimulatorRemoveProbeBatch"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSimulatorSetSharedInputs$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSimulatorSetSharedInputs"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSimulatorCommit$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSimulatorCommit"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSimulatorRunDirect$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSimulatorRunDirect"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSimulatorRunReflections$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSimulatorRunReflections"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSimulatorRunPathing$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSimulatorRunPathing"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSourceCreate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSourceCreate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSourceRetain$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSourceRetain"),
    FunctionDescriptor.of(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSourceRelease$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSourceRelease"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSourceAdd$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSourceAdd"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSourceRemove$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSourceRemove"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSourceSetInputs$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSourceSetInputs"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplSourceGetOutputs$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplSourceGetOutputs"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        ValueLayout.JAVA_INT,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplDistanceAttenuationCalculate$mh`: MethodHandle =
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("iplDistanceAttenuationCalculate"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_FLOAT,
            `$RuntimeHelper`.POINTER,
            IPLVector3.layout,
            IPLVector3.layout,
            `$RuntimeHelper`.POINTER,
        )
    )

internal val `iplAirAbsorptionCalculate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplAirAbsorptionCalculate"),
    FunctionDescriptor.ofVoid(
        `$RuntimeHelper`.POINTER,
        IPLVector3.layout,
        IPLVector3.layout,
        `$RuntimeHelper`.POINTER,
        `$RuntimeHelper`.POINTER,
    )
)

internal val `iplDirectivityCalculate$mh`: MethodHandle = Linker.nativeLinker().downcallHandle(
    `$RuntimeHelper`.findSymbol("iplDirectivityCalculate"),
    FunctionDescriptor.of(
        ValueLayout.JAVA_FLOAT,
        `$RuntimeHelper`.POINTER,
        IPLCoordinateSpace3.layout,
        IPLVector3.layout,
        `$RuntimeHelper`.POINTER,
    )
)
