// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class IPLHit(
    public val `$mem`: MemorySegment,
) {
    public var distance: IPLfloat32
        get() = IPLHit.distanceHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLHit.distanceHandle.set(this.`$mem`, 0L, value)
        }

    public var triangleIndex: IPLint32
        get() = IPLHit.triangleIndexHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLHit.triangleIndexHandle.set(this.`$mem`, 0L, value)
        }

    public var objectIndex: IPLint32
        get() = IPLHit.objectIndexHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLHit.objectIndexHandle.set(this.`$mem`, 0L, value)
        }

    public var materialIndex: IPLint32
        get() = IPLHit.materialIndexHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLHit.materialIndexHandle.set(this.`$mem`, 0L, value)
        }

    public var normal: IPLVector3
        get() = IPLVector3(IPLHit.normalHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.normal.`$mem`, 0L, IPLVector3.layout.byteSize())
        }

    public var material: Pointer<IPLMaterial>
        get() = IPLHit.materialHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLHit.materialHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLHit.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_FLOAT.withName("distance"),
            ValueLayout.JAVA_INT.withName("triangleIndex"),
            ValueLayout.JAVA_INT.withName("objectIndex"),
            ValueLayout.JAVA_INT.withName("materialIndex"),
            IPLVector3.layout.withName("normal"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("material"),
        ).withName("IPLHit")

        @JvmField
        public val distanceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("distance"))

        @JvmField
        public val triangleIndexHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("triangleIndex"))

        @JvmField
        public val objectIndexHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("objectIndex"))

        @JvmField
        public val materialIndexHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("materialIndex"))

        @JvmField
        public val normalHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("normal"))

        @JvmField
        public val materialHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("material"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLHit = IPLHit(alloc.allocate(IPLHit.layout))
    }
}
