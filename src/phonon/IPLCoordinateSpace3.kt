// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.MethodHandle

@JvmInline
public value class IPLCoordinateSpace3(
    public val `$mem`: MemorySegment,
) {
    public var right: IPLVector3
        get() = IPLVector3(
            IPLCoordinateSpace3.rightHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.right.`$mem`, 0L, IPLVector3.layout.byteSize())
        }

    public var up: IPLVector3
        get() = IPLVector3(IPLCoordinateSpace3.upHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.up.`$mem`, 0L, IPLVector3.layout.byteSize())
        }

    public var ahead: IPLVector3
        get() = IPLVector3(
            IPLCoordinateSpace3.aheadHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.ahead.`$mem`, 0L, IPLVector3.layout.byteSize())
        }

    public var origin: IPLVector3
        get() = IPLVector3(
            IPLCoordinateSpace3.originHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.origin.`$mem`, 0L, IPLVector3.layout.byteSize())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLCoordinateSpace3.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            IPLVector3.layout.withName("right"),
            IPLVector3.layout.withName("up"),
            IPLVector3.layout.withName("ahead"),
            IPLVector3.layout.withName("origin"),
        ).withName("IPLCoordinateSpace3")

        @JvmField
        public val rightHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("right"))

        @JvmField
        public val upHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("up"))

        @JvmField
        public val aheadHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("ahead"))

        @JvmField
        public val originHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("origin"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLCoordinateSpace3 =
            IPLCoordinateSpace3(alloc.allocate(IPLCoordinateSpace3.layout))
    }
}
