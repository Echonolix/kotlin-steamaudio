// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

public typealias IPLint8 = Byte

public typealias IPLuint8 = UByte

public typealias IPLint16 = Short

public typealias IPLuint16 = UShort

public typealias IPLint32 = Int

public typealias IPLuint32 = UInt

public typealias IPLint64 = Long

public typealias IPLuint64 = ULong

public typealias IPLfloat32 = Float

public typealias IPLfloat64 = Double

public typealias IPLbyte = UByte

public typealias IPLsize = ULong

public typealias IPLstring = Pointer<Byte>

public typealias IPLProgressCallback = Pointer<(
    progress: IPLfloat32,
    userData: Pointer<Unit>
) -> Unit>

public typealias IPLContext = Pointer<_IPLContext_t>

public typealias IPLLogFunction = Pointer<(level: IPLLogLevel, message: Pointer<Byte>) -> Unit>

public typealias IPLAllocateFunction = Pointer<(size: IPLsize, alignment: IPLsize) -> Pointer<Unit>>

public typealias IPLFreeFunction = Pointer<(memoryBlock: Pointer<Unit>) -> Unit>

public typealias IPLSerializedObject = Pointer<_IPLSerializedObject_t>

public typealias IPLEmbreeDevice = Pointer<_IPLEmbreeDevice_t>

public typealias IPLEmbreeDeviceSettings = Unit

public typealias IPLOpenCLDeviceList = Pointer<_IPLOpenCLDeviceList_t>

public typealias IPLOpenCLDevice = Pointer<_IPLOpenCLDevice_t>

public typealias IPLRadeonRaysDevice = Pointer<_IPLRadeonRaysDevice_t>

public typealias IPLRadeonRaysDeviceSettings = Unit

public typealias IPLTrueAudioNextDevice = Pointer<_IPLTrueAudioNextDevice_t>

public typealias IPLScene = Pointer<_IPLScene_t>

public typealias IPLStaticMesh = Pointer<_IPLStaticMesh_t>

public typealias IPLInstancedMesh = Pointer<_IPLInstancedMesh_t>

public typealias IPLClosestHitCallback = Pointer<(
    ray: Pointer<IPLRay>,
    minDistance: IPLfloat32,
    maxDistance: IPLfloat32,
    hit: Pointer<IPLHit>,
    userData: Pointer<Unit>,
) -> Unit>

public typealias IPLAnyHitCallback = Pointer<(
    ray: Pointer<IPLRay>,
    minDistance: IPLfloat32,
    maxDistance: IPLfloat32,
    occluded: Pointer<IPLuint8>,
    userData: Pointer<Unit>,
) -> Unit>

public typealias IPLBatchedClosestHitCallback = Pointer<(
    numRays: IPLint32,
    rays: Pointer<IPLRay>,
    minDistances: Pointer<IPLfloat32>,
    maxDistances: Pointer<IPLfloat32>,
    hits: Pointer<IPLHit>,
    userData: Pointer<Unit>,
) -> Unit>

public typealias IPLBatchedAnyHitCallback = Pointer<(
    numRays: IPLint32,
    rays: Pointer<IPLRay>,
    minDistances: Pointer<IPLfloat32>,
    maxDistances: Pointer<IPLfloat32>,
    occluded: Pointer<IPLuint8>,
    userData: Pointer<Unit>,
) -> Unit>

public typealias IPLHRTF = Pointer<_IPLHRTF_t>

public typealias IPLPanningEffect = Pointer<_IPLPanningEffect_t>

public typealias IPLBinauralEffect = Pointer<_IPLBinauralEffect_t>

public typealias IPLVirtualSurroundEffect = Pointer<_IPLVirtualSurroundEffect_t>

public typealias IPLAmbisonicsEncodeEffect = Pointer<_IPLAmbisonicsEncodeEffect_t>

public typealias IPLAmbisonicsPanningEffect = Pointer<_IPLAmbisonicsPanningEffect_t>

public typealias IPLAmbisonicsBinauralEffect = Pointer<_IPLAmbisonicsBinauralEffect_t>

public typealias IPLAmbisonicsRotationEffect = Pointer<_IPLAmbisonicsRotationEffect_t>

public typealias IPLAmbisonicsDecodeEffect = Pointer<_IPLAmbisonicsDecodeEffect_t>

public typealias IPLDirectEffect = Pointer<_IPLDirectEffect_t>

public typealias IPLReflectionEffectIR = Pointer<_IPLReflectionEffectIR_t>

public typealias IPLReflectionEffect = Pointer<_IPLReflectionEffect_t>

public typealias IPLReflectionMixer = Pointer<_IPLReflectionMixer_t>

public typealias IPLPathEffect = Pointer<_IPLPathEffect_t>

public typealias IPLProbeArray = Pointer<_IPLProbeArray_t>

public typealias IPLProbeBatch = Pointer<_IPLProbeBatch_t>

public typealias IPLSource = Pointer<_IPLSource_t>

public typealias IPLSimulator = Pointer<_IPLSimulator_t>

public typealias IPLDistanceAttenuationCallback = Pointer<(
    distance: IPLfloat32,
    userData: Pointer<Unit>
) -> Float>

public typealias IPLAirAbsorptionCallback = Pointer<(
    distance: IPLfloat32,
    band: IPLint32,
    userData: Pointer<Unit>,
) -> Float>

public typealias IPLDirectivityCallback = Pointer<(
    direction: IPLVector3,
    userData: Pointer<Unit>
) -> Float>

public typealias IPLPathingVisualizationCallback = Pointer<(
    from: IPLVector3,
    to: IPLVector3,
    occluded: IPLbool,
    userData: Pointer<Unit>,
) -> Unit>
