// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.MethodHandle

@JvmInline
public value class IPLBox(
    public val `$mem`: MemorySegment,
) {
    public var minCoordinates: IPLVector3
        get() = IPLVector3(IPLBox.minCoordinatesHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.minCoordinates.`$mem`, 0L,
                IPLVector3.layout.byteSize()
            )
        }

    public var maxCoordinates: IPLVector3
        get() = IPLVector3(IPLBox.maxCoordinatesHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.maxCoordinates.`$mem`, 0L,
                IPLVector3.layout.byteSize()
            )
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLBox.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            IPLVector3.layout.withName("minCoordinates"),
            IPLVector3.layout.withName("maxCoordinates"),
        ).withName("IPLBox")

        @JvmField
        public val minCoordinatesHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("minCoordinates"))

        @JvmField
        public val maxCoordinatesHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("maxCoordinates"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLBox = IPLBox(alloc.allocate(IPLBox.layout))
    }
}
