// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.VarHandle

@JvmInline
public value class IPLAirAbsorptionModel(
    public val `$mem`: MemorySegment,
) {
    public var type: IPLAirAbsorptionModelType
        get() = IPLAirAbsorptionModelType.fromInt(
            IPLAirAbsorptionModel.typeHandle.get(this.`$mem`, 0L)
                    as Int
        )
        set(`value`) {
            IPLAirAbsorptionModel.typeHandle.set(this.`$mem`, 0L, value.value)
        }

    public val coefficients: NativeArray<IPLfloat32>
        get() = IPLAirAbsorptionModel.coefficientsHandle.invokeExact(this.`$mem`, 0L) as MemorySegment

    public var callback: IPLAirAbsorptionCallback
        get() = IPLAirAbsorptionModel.callbackHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLAirAbsorptionModel.callbackHandle.set(this.`$mem`, 0L, value)
        }

    public var userData: Pointer<Unit>
        get() = IPLAirAbsorptionModel.userDataHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLAirAbsorptionModel.userDataHandle.set(this.`$mem`, 0L, value)
        }

    public var dirty: IPLbool
        get() = IPLbool.fromInt(IPLAirAbsorptionModel.dirtyHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            IPLAirAbsorptionModel.dirtyHandle.set(this.`$mem`, 0L, value.value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLAirAbsorptionModel.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_INT.withName("type"),
            MemoryLayout.sequenceLayout(3L, ValueLayout.JAVA_FLOAT).withName("coefficients"),
            `$RuntimeHelper`.POINTER.withName("callback"),
            `$RuntimeHelper`.POINTER.withName("userData"),
            ValueLayout.JAVA_INT.withName("dirty"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
        ).withName("IPLAirAbsorptionModel")

        @JvmField
        public val typeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("type"))

        @JvmField
        public val coefficientsHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("coefficients"))

        @JvmField
        public val callbackHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("callback"))

        @JvmField
        public val userDataHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("userData"))

        @JvmField
        public val dirtyHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("dirty"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLAirAbsorptionModel =
            IPLAirAbsorptionModel(alloc.allocate(IPLAirAbsorptionModel.layout))

        public fun interface callback {
            public fun invoke(
                distance: IPLfloat32,
                band: IPLint32,
                userData: Pointer<Unit>,
            ): Float

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(callback::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_FLOAT,
                    ValueLayout.JAVA_FLOAT,
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }
    }
}
