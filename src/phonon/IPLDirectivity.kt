// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.VarHandle

@JvmInline
public value class IPLDirectivity(
    public val `$mem`: MemorySegment,
) {
    public var dipoleWeight: IPLfloat32
        get() = IPLDirectivity.dipoleWeightHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLDirectivity.dipoleWeightHandle.set(this.`$mem`, 0L, value)
        }

    public var dipolePower: IPLfloat32
        get() = IPLDirectivity.dipolePowerHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLDirectivity.dipolePowerHandle.set(this.`$mem`, 0L, value)
        }

    public var callback: IPLDirectivityCallback
        get() = IPLDirectivity.callbackHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLDirectivity.callbackHandle.set(this.`$mem`, 0L, value)
        }

    public var userData: Pointer<Unit>
        get() = IPLDirectivity.userDataHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLDirectivity.userDataHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLDirectivity.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_FLOAT.withName("dipoleWeight"),
            ValueLayout.JAVA_FLOAT.withName("dipolePower"),
            `$RuntimeHelper`.POINTER.withName("callback"),
            `$RuntimeHelper`.POINTER.withName("userData"),
        ).withName("IPLDirectivity")

        @JvmField
        public val dipoleWeightHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("dipoleWeight"))

        @JvmField
        public val dipolePowerHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("dipolePower"))

        @JvmField
        public val callbackHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("callback"))

        @JvmField
        public val userDataHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("userData"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLDirectivity =
            IPLDirectivity(alloc.allocate(IPLDirectivity.layout))

        public fun interface callback {
            public fun invoke(direction: IPLVector3, userData: Pointer<Unit>): Float

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(callback::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_FLOAT,
                    IPLVector3.layout,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }
    }
}
