// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class IPLMaterial(
    public val `$mem`: MemorySegment,
) {
    public val absorption: NativeArray<IPLfloat32>
        get() = IPLMaterial.absorptionHandle.invokeExact(this.`$mem`, 0L) as MemorySegment

    public var scattering: IPLfloat32
        get() = IPLMaterial.scatteringHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLMaterial.scatteringHandle.set(this.`$mem`, 0L, value)
        }

    public val transmission: NativeArray<IPLfloat32>
        get() = IPLMaterial.transmissionHandle.invokeExact(this.`$mem`, 0L) as MemorySegment

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLMaterial.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(3L, ValueLayout.JAVA_FLOAT).withName("absorption"),
            ValueLayout.JAVA_FLOAT.withName("scattering"),
            MemoryLayout.sequenceLayout(3L, ValueLayout.JAVA_FLOAT).withName("transmission"),
        ).withName("IPLMaterial")

        @JvmField
        public val absorptionHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("absorption"))

        @JvmField
        public val scatteringHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("scattering"))

        @JvmField
        public val transmissionHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("transmission"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLMaterial =
            IPLMaterial(alloc.allocate(IPLMaterial.layout))
    }
}
