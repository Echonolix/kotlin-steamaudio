// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class IPLInstancedMeshSettings(
    public val `$mem`: MemorySegment,
) {
    public var subScene: IPLScene
        get() = IPLInstancedMeshSettings.subSceneHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLInstancedMeshSettings.subSceneHandle.set(this.`$mem`, 0L, value)
        }

    public var transform: IPLMatrix4x4
        get() = IPLMatrix4x4(
            IPLInstancedMeshSettings.transformHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.transform.`$mem`, 0L,
                IPLMatrix4x4.layout.byteSize()
            )
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLInstancedMeshSettings.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("subScene"),
            IPLMatrix4x4.layout.withName("transform"),
        ).withName("IPLInstancedMeshSettings")

        @JvmField
        public val subSceneHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("subScene"))

        @JvmField
        public val transformHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("transform"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLInstancedMeshSettings =
            IPLInstancedMeshSettings(alloc.allocate(IPLInstancedMeshSettings.layout))
    }
}
