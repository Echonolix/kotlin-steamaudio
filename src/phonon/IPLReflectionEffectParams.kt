// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class IPLReflectionEffectParams(
    public val `$mem`: MemorySegment,
) {
    public var type: IPLReflectionEffectType
        get() = IPLReflectionEffectType.fromInt(
            IPLReflectionEffectParams.typeHandle.get(
                this.`$mem`,
                0L
            ) as Int
        )
        set(`value`) {
            IPLReflectionEffectParams.typeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var ir: IPLReflectionEffectIR
        get() = IPLReflectionEffectParams.irHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLReflectionEffectParams.irHandle.set(this.`$mem`, 0L, value)
        }

    public val reverbTimes: NativeArray<IPLfloat32>
        get() = IPLReflectionEffectParams.reverbTimesHandle.invokeExact(this.`$mem`, 0L) as
                MemorySegment

    public val eq: NativeArray<IPLfloat32>
        get() = IPLReflectionEffectParams.eqHandle.invokeExact(this.`$mem`, 0L) as MemorySegment

    public var delay: IPLint32
        get() = IPLReflectionEffectParams.delayHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLReflectionEffectParams.delayHandle.set(this.`$mem`, 0L, value)
        }

    public var numChannels: IPLint32
        get() = IPLReflectionEffectParams.numChannelsHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLReflectionEffectParams.numChannelsHandle.set(this.`$mem`, 0L, value)
        }

    public var irSize: IPLint32
        get() = IPLReflectionEffectParams.irSizeHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLReflectionEffectParams.irSizeHandle.set(this.`$mem`, 0L, value)
        }

    public var tanDevice: IPLTrueAudioNextDevice
        get() = IPLReflectionEffectParams.tanDeviceHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLReflectionEffectParams.tanDeviceHandle.set(this.`$mem`, 0L, value)
        }

    public var tanSlot: IPLint32
        get() = IPLReflectionEffectParams.tanSlotHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLReflectionEffectParams.tanSlotHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLReflectionEffectParams.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_INT.withName("type"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("ir"),
            MemoryLayout.sequenceLayout(3L, ValueLayout.JAVA_FLOAT).withName("reverbTimes"),
            MemoryLayout.sequenceLayout(3L, ValueLayout.JAVA_FLOAT).withName("eq"),
            ValueLayout.JAVA_INT.withName("delay"),
            ValueLayout.JAVA_INT.withName("numChannels"),
            ValueLayout.JAVA_INT.withName("irSize"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("tanDevice"),
            ValueLayout.JAVA_INT.withName("tanSlot"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
        ).withName("IPLReflectionEffectParams")

        @JvmField
        public val typeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("type"))

        @JvmField
        public val irHandle: VarHandle = layout.varHandle(MemoryLayout.PathElement.groupElement("ir"))

        @JvmField
        public val reverbTimesHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("reverbTimes"))

        @JvmField
        public val eqHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("eq"))

        @JvmField
        public val delayHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("delay"))

        @JvmField
        public val numChannelsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("numChannels"))

        @JvmField
        public val irSizeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("irSize"))

        @JvmField
        public val tanDeviceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("tanDevice"))

        @JvmField
        public val tanSlotHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("tanSlot"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLReflectionEffectParams =
            IPLReflectionEffectParams(alloc.allocate(IPLReflectionEffectParams.layout))
    }
}
