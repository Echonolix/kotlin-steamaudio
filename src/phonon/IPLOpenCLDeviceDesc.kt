// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class IPLOpenCLDeviceDesc(
    public val `$mem`: MemorySegment,
) {
    public var platform: Pointer<Unit>
        get() = IPLOpenCLDeviceDesc.platformHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLOpenCLDeviceDesc.platformHandle.set(this.`$mem`, 0L, value)
        }

    public var platformName: IPLstring
        get() = IPLOpenCLDeviceDesc.platformNameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLOpenCLDeviceDesc.platformNameHandle.set(this.`$mem`, 0L, value)
        }

    public var platformVendor: IPLstring
        get() = IPLOpenCLDeviceDesc.platformVendorHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLOpenCLDeviceDesc.platformVendorHandle.set(this.`$mem`, 0L, value)
        }

    public var platformVersion: IPLstring
        get() = IPLOpenCLDeviceDesc.platformVersionHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLOpenCLDeviceDesc.platformVersionHandle.set(this.`$mem`, 0L, value)
        }

    public var device: Pointer<Unit>
        get() = IPLOpenCLDeviceDesc.deviceHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLOpenCLDeviceDesc.deviceHandle.set(this.`$mem`, 0L, value)
        }

    public var deviceName: IPLstring
        get() = IPLOpenCLDeviceDesc.deviceNameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLOpenCLDeviceDesc.deviceNameHandle.set(this.`$mem`, 0L, value)
        }

    public var deviceVendor: IPLstring
        get() = IPLOpenCLDeviceDesc.deviceVendorHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLOpenCLDeviceDesc.deviceVendorHandle.set(this.`$mem`, 0L, value)
        }

    public var deviceVersion: IPLstring
        get() = IPLOpenCLDeviceDesc.deviceVersionHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLOpenCLDeviceDesc.deviceVersionHandle.set(this.`$mem`, 0L, value)
        }

    public var type: IPLOpenCLDeviceType
        get() = IPLOpenCLDeviceType.fromInt(IPLOpenCLDeviceDesc.typeHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            IPLOpenCLDeviceDesc.typeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var numConvolutionCUs: IPLint32
        get() = IPLOpenCLDeviceDesc.numConvolutionCUsHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLOpenCLDeviceDesc.numConvolutionCUsHandle.set(this.`$mem`, 0L, value)
        }

    public var numIRUpdateCUs: IPLint32
        get() = IPLOpenCLDeviceDesc.numIRUpdateCUsHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLOpenCLDeviceDesc.numIRUpdateCUsHandle.set(this.`$mem`, 0L, value)
        }

    public var granularity: IPLint32
        get() = IPLOpenCLDeviceDesc.granularityHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLOpenCLDeviceDesc.granularityHandle.set(this.`$mem`, 0L, value)
        }

    public var perfScore: IPLfloat32
        get() = IPLOpenCLDeviceDesc.perfScoreHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLOpenCLDeviceDesc.perfScoreHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLOpenCLDeviceDesc.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("platform"),
            `$RuntimeHelper`.POINTER.withName("platformName"),
            `$RuntimeHelper`.POINTER.withName("platformVendor"),
            `$RuntimeHelper`.POINTER.withName("platformVersion"),
            `$RuntimeHelper`.POINTER.withName("device"),
            `$RuntimeHelper`.POINTER.withName("deviceName"),
            `$RuntimeHelper`.POINTER.withName("deviceVendor"),
            `$RuntimeHelper`.POINTER.withName("deviceVersion"),
            ValueLayout.JAVA_INT.withName("type"),
            ValueLayout.JAVA_INT.withName("numConvolutionCUs"),
            ValueLayout.JAVA_INT.withName("numIRUpdateCUs"),
            ValueLayout.JAVA_INT.withName("granularity"),
            ValueLayout.JAVA_FLOAT.withName("perfScore"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
        ).withName("IPLOpenCLDeviceDesc")

        @JvmField
        public val platformHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("platform"))

        @JvmField
        public val platformNameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("platformName"))

        @JvmField
        public val platformVendorHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("platformVendor"))

        @JvmField
        public val platformVersionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("platformVersion"))

        @JvmField
        public val deviceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("device"))

        @JvmField
        public val deviceNameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("deviceName"))

        @JvmField
        public val deviceVendorHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("deviceVendor"))

        @JvmField
        public val deviceVersionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("deviceVersion"))

        @JvmField
        public val typeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("type"))

        @JvmField
        public val numConvolutionCUsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("numConvolutionCUs"))

        @JvmField
        public val numIRUpdateCUsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("numIRUpdateCUs"))

        @JvmField
        public val granularityHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("granularity"))

        @JvmField
        public val perfScoreHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("perfScore"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLOpenCLDeviceDesc =
            IPLOpenCLDeviceDesc(alloc.allocate(IPLOpenCLDeviceDesc.layout))
    }
}
