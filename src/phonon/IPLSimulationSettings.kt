// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class IPLSimulationSettings(
    public val `$mem`: MemorySegment,
) {
    public var flags: IPLSimulationFlags
        get() = IPLSimulationFlags.fromInt(
            IPLSimulationSettings.flagsHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            IPLSimulationSettings.flagsHandle.set(this.`$mem`, 0L, value.value)
        }

    public var sceneType: IPLSceneType
        get() = IPLSceneType.fromInt(IPLSimulationSettings.sceneTypeHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            IPLSimulationSettings.sceneTypeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var reflectionType: IPLReflectionEffectType
        get() =
            IPLReflectionEffectType.fromInt(
                IPLSimulationSettings.reflectionTypeHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            IPLSimulationSettings.reflectionTypeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var maxNumOcclusionSamples: IPLint32
        get() = IPLSimulationSettings.maxNumOcclusionSamplesHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLSimulationSettings.maxNumOcclusionSamplesHandle.set(this.`$mem`, 0L, value)
        }

    public var maxNumRays: IPLint32
        get() = IPLSimulationSettings.maxNumRaysHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLSimulationSettings.maxNumRaysHandle.set(this.`$mem`, 0L, value)
        }

    public var numDiffuseSamples: IPLint32
        get() = IPLSimulationSettings.numDiffuseSamplesHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLSimulationSettings.numDiffuseSamplesHandle.set(this.`$mem`, 0L, value)
        }

    public var maxDuration: IPLfloat32
        get() = IPLSimulationSettings.maxDurationHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLSimulationSettings.maxDurationHandle.set(this.`$mem`, 0L, value)
        }

    public var maxOrder: IPLint32
        get() = IPLSimulationSettings.maxOrderHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLSimulationSettings.maxOrderHandle.set(this.`$mem`, 0L, value)
        }

    public var maxNumSources: IPLint32
        get() = IPLSimulationSettings.maxNumSourcesHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLSimulationSettings.maxNumSourcesHandle.set(this.`$mem`, 0L, value)
        }

    public var numThreads: IPLint32
        get() = IPLSimulationSettings.numThreadsHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLSimulationSettings.numThreadsHandle.set(this.`$mem`, 0L, value)
        }

    public var rayBatchSize: IPLint32
        get() = IPLSimulationSettings.rayBatchSizeHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLSimulationSettings.rayBatchSizeHandle.set(this.`$mem`, 0L, value)
        }

    public var numVisSamples: IPLint32
        get() = IPLSimulationSettings.numVisSamplesHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLSimulationSettings.numVisSamplesHandle.set(this.`$mem`, 0L, value)
        }

    public var samplingRate: IPLint32
        get() = IPLSimulationSettings.samplingRateHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLSimulationSettings.samplingRateHandle.set(this.`$mem`, 0L, value)
        }

    public var frameSize: IPLint32
        get() = IPLSimulationSettings.frameSizeHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLSimulationSettings.frameSizeHandle.set(this.`$mem`, 0L, value)
        }

    public var openCLDevice: IPLOpenCLDevice
        get() = IPLSimulationSettings.openCLDeviceHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLSimulationSettings.openCLDeviceHandle.set(this.`$mem`, 0L, value)
        }

    public var radeonRaysDevice: IPLRadeonRaysDevice
        get() = IPLSimulationSettings.radeonRaysDeviceHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLSimulationSettings.radeonRaysDeviceHandle.set(this.`$mem`, 0L, value)
        }

    public var tanDevice: IPLTrueAudioNextDevice
        get() = IPLSimulationSettings.tanDeviceHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLSimulationSettings.tanDeviceHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLSimulationSettings.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_INT.withName("flags"),
            ValueLayout.JAVA_INT.withName("sceneType"),
            ValueLayout.JAVA_INT.withName("reflectionType"),
            ValueLayout.JAVA_INT.withName("maxNumOcclusionSamples"),
            ValueLayout.JAVA_INT.withName("maxNumRays"),
            ValueLayout.JAVA_INT.withName("numDiffuseSamples"),
            ValueLayout.JAVA_FLOAT.withName("maxDuration"),
            ValueLayout.JAVA_INT.withName("maxOrder"),
            ValueLayout.JAVA_INT.withName("maxNumSources"),
            ValueLayout.JAVA_INT.withName("numThreads"),
            ValueLayout.JAVA_INT.withName("rayBatchSize"),
            ValueLayout.JAVA_INT.withName("numVisSamples"),
            ValueLayout.JAVA_INT.withName("samplingRate"),
            ValueLayout.JAVA_INT.withName("frameSize"),
            `$RuntimeHelper`.POINTER.withName("openCLDevice"),
            `$RuntimeHelper`.POINTER.withName("radeonRaysDevice"),
            `$RuntimeHelper`.POINTER.withName("tanDevice"),
        ).withName("IPLSimulationSettings")

        @JvmField
        public val flagsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("flags"))

        @JvmField
        public val sceneTypeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("sceneType"))

        @JvmField
        public val reflectionTypeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("reflectionType"))

        @JvmField
        public val maxNumOcclusionSamplesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("maxNumOcclusionSamples"))

        @JvmField
        public val maxNumRaysHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("maxNumRays"))

        @JvmField
        public val numDiffuseSamplesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("numDiffuseSamples"))

        @JvmField
        public val maxDurationHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("maxDuration"))

        @JvmField
        public val maxOrderHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("maxOrder"))

        @JvmField
        public val maxNumSourcesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("maxNumSources"))

        @JvmField
        public val numThreadsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("numThreads"))

        @JvmField
        public val rayBatchSizeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("rayBatchSize"))

        @JvmField
        public val numVisSamplesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("numVisSamples"))

        @JvmField
        public val samplingRateHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("samplingRate"))

        @JvmField
        public val frameSizeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("frameSize"))

        @JvmField
        public val openCLDeviceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("openCLDevice"))

        @JvmField
        public val radeonRaysDeviceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("radeonRaysDevice"))

        @JvmField
        public val tanDeviceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("tanDevice"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLSimulationSettings =
            IPLSimulationSettings(alloc.allocate(IPLSimulationSettings.layout))
    }
}
