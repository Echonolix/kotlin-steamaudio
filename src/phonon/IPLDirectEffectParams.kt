// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class IPLDirectEffectParams(
    public val `$mem`: MemorySegment,
) {
    public var flags: IPLDirectEffectFlags
        get() = IPLDirectEffectFlags.fromInt(
            IPLDirectEffectParams.flagsHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            IPLDirectEffectParams.flagsHandle.set(this.`$mem`, 0L, value.value)
        }

    public var transmissionType: IPLTransmissionType
        get() =
            IPLTransmissionType.fromInt(
                IPLDirectEffectParams.transmissionTypeHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            IPLDirectEffectParams.transmissionTypeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var distanceAttenuation: IPLfloat32
        get() = IPLDirectEffectParams.distanceAttenuationHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLDirectEffectParams.distanceAttenuationHandle.set(this.`$mem`, 0L, value)
        }

    public val airAbsorption: NativeArray<IPLfloat32>
        get() = IPLDirectEffectParams.airAbsorptionHandle.invokeExact(this.`$mem`, 0L) as MemorySegment

    public var directivity: IPLfloat32
        get() = IPLDirectEffectParams.directivityHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLDirectEffectParams.directivityHandle.set(this.`$mem`, 0L, value)
        }

    public var occlusion: IPLfloat32
        get() = IPLDirectEffectParams.occlusionHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLDirectEffectParams.occlusionHandle.set(this.`$mem`, 0L, value)
        }

    public val transmission: NativeArray<IPLfloat32>
        get() = IPLDirectEffectParams.transmissionHandle.invokeExact(this.`$mem`, 0L) as MemorySegment

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLDirectEffectParams.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_INT.withName("flags"),
            ValueLayout.JAVA_INT.withName("transmissionType"),
            ValueLayout.JAVA_FLOAT.withName("distanceAttenuation"),
            MemoryLayout.sequenceLayout(3L, ValueLayout.JAVA_FLOAT).withName("airAbsorption"),
            ValueLayout.JAVA_FLOAT.withName("directivity"),
            ValueLayout.JAVA_FLOAT.withName("occlusion"),
            MemoryLayout.sequenceLayout(3L, ValueLayout.JAVA_FLOAT).withName("transmission"),
        ).withName("IPLDirectEffectParams")

        @JvmField
        public val flagsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("flags"))

        @JvmField
        public val transmissionTypeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("transmissionType"))

        @JvmField
        public val distanceAttenuationHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("distanceAttenuation"))

        @JvmField
        public val airAbsorptionHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("airAbsorption"))

        @JvmField
        public val directivityHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("directivity"))

        @JvmField
        public val occlusionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("occlusion"))

        @JvmField
        public val transmissionHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("transmission"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLDirectEffectParams =
            IPLDirectEffectParams(alloc.allocate(IPLDirectEffectParams.layout))
    }
}
