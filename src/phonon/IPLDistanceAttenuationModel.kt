// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.VarHandle

@JvmInline
public value class IPLDistanceAttenuationModel(
    public val `$mem`: MemorySegment,
) {
    public var type: IPLDistanceAttenuationModelType
        get() =
            IPLDistanceAttenuationModelType.fromInt(
                IPLDistanceAttenuationModel.typeHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            IPLDistanceAttenuationModel.typeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var minDistance: IPLfloat32
        get() = IPLDistanceAttenuationModel.minDistanceHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLDistanceAttenuationModel.minDistanceHandle.set(this.`$mem`, 0L, value)
        }

    public var callback: IPLDistanceAttenuationCallback
        get() = IPLDistanceAttenuationModel.callbackHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLDistanceAttenuationModel.callbackHandle.set(this.`$mem`, 0L, value)
        }

    public var userData: Pointer<Unit>
        get() = IPLDistanceAttenuationModel.userDataHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLDistanceAttenuationModel.userDataHandle.set(this.`$mem`, 0L, value)
        }

    public var dirty: IPLbool
        get() = IPLbool.fromInt(IPLDistanceAttenuationModel.dirtyHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            IPLDistanceAttenuationModel.dirtyHandle.set(this.`$mem`, 0L, value.value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLDistanceAttenuationModel.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_INT.withName("type"),
            ValueLayout.JAVA_FLOAT.withName("minDistance"),
            `$RuntimeHelper`.POINTER.withName("callback"),
            `$RuntimeHelper`.POINTER.withName("userData"),
            ValueLayout.JAVA_INT.withName("dirty"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
        ).withName("IPLDistanceAttenuationModel")

        @JvmField
        public val typeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("type"))

        @JvmField
        public val minDistanceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("minDistance"))

        @JvmField
        public val callbackHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("callback"))

        @JvmField
        public val userDataHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("userData"))

        @JvmField
        public val dirtyHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("dirty"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLDistanceAttenuationModel =
            IPLDistanceAttenuationModel(alloc.allocate(IPLDistanceAttenuationModel.layout))

        public fun interface callback {
            public fun invoke(distance: IPLfloat32, userData: Pointer<Unit>): Float

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(callback::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_FLOAT,
                    ValueLayout.JAVA_FLOAT,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }
    }
}
