// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class IPLBinauralEffectParams(
    public val `$mem`: MemorySegment,
) {
    public var direction: IPLVector3
        get() = IPLVector3(
            IPLBinauralEffectParams.directionHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.direction.`$mem`, 0L, IPLVector3.layout.byteSize())
        }

    public var interpolation: IPLHRTFInterpolation
        get() =
            IPLHRTFInterpolation.fromInt(
                IPLBinauralEffectParams.interpolationHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            IPLBinauralEffectParams.interpolationHandle.set(this.`$mem`, 0L, value.value)
        }

    public var spatialBlend: IPLfloat32
        get() = IPLBinauralEffectParams.spatialBlendHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLBinauralEffectParams.spatialBlendHandle.set(this.`$mem`, 0L, value)
        }

    public var hrtf: IPLHRTF
        get() = IPLBinauralEffectParams.hrtfHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLBinauralEffectParams.hrtfHandle.set(this.`$mem`, 0L, value)
        }

    public var peakDelays: Pointer<IPLfloat32>
        get() = IPLBinauralEffectParams.peakDelaysHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLBinauralEffectParams.peakDelaysHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLBinauralEffectParams.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            IPLVector3.layout.withName("direction"),
            ValueLayout.JAVA_INT.withName("interpolation"),
            ValueLayout.JAVA_FLOAT.withName("spatialBlend"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("hrtf"),
            `$RuntimeHelper`.POINTER.withName("peakDelays"),
        ).withName("IPLBinauralEffectParams")

        @JvmField
        public val directionHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("direction"))

        @JvmField
        public val interpolationHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("interpolation"))

        @JvmField
        public val spatialBlendHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("spatialBlend"))

        @JvmField
        public val hrtfHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("hrtf"))

        @JvmField
        public val peakDelaysHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("peakDelays"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLBinauralEffectParams =
            IPLBinauralEffectParams(alloc.allocate(IPLBinauralEffectParams.layout))
    }
}
