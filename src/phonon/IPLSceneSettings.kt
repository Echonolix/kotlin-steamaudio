// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.VarHandle

@JvmInline
public value class IPLSceneSettings(
    public val `$mem`: MemorySegment,
) {
    public var type: IPLSceneType
        get() = IPLSceneType.fromInt(IPLSceneSettings.typeHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            IPLSceneSettings.typeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var closestHitCallback: IPLClosestHitCallback
        get() = IPLSceneSettings.closestHitCallbackHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLSceneSettings.closestHitCallbackHandle.set(this.`$mem`, 0L, value)
        }

    public var anyHitCallback: IPLAnyHitCallback
        get() = IPLSceneSettings.anyHitCallbackHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLSceneSettings.anyHitCallbackHandle.set(this.`$mem`, 0L, value)
        }

    public var batchedClosestHitCallback: IPLBatchedClosestHitCallback
        get() = IPLSceneSettings.batchedClosestHitCallbackHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLSceneSettings.batchedClosestHitCallbackHandle.set(this.`$mem`, 0L, value)
        }

    public var batchedAnyHitCallback: IPLBatchedAnyHitCallback
        get() = IPLSceneSettings.batchedAnyHitCallbackHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLSceneSettings.batchedAnyHitCallbackHandle.set(this.`$mem`, 0L, value)
        }

    public var userData: Pointer<Unit>
        get() = IPLSceneSettings.userDataHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLSceneSettings.userDataHandle.set(this.`$mem`, 0L, value)
        }

    public var embreeDevice: IPLEmbreeDevice
        get() = IPLSceneSettings.embreeDeviceHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLSceneSettings.embreeDeviceHandle.set(this.`$mem`, 0L, value)
        }

    public var radeonRaysDevice: IPLRadeonRaysDevice
        get() = IPLSceneSettings.radeonRaysDeviceHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLSceneSettings.radeonRaysDeviceHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLSceneSettings.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_INT.withName("type"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("closestHitCallback"),
            `$RuntimeHelper`.POINTER.withName("anyHitCallback"),
            `$RuntimeHelper`.POINTER.withName("batchedClosestHitCallback"),
            `$RuntimeHelper`.POINTER.withName("batchedAnyHitCallback"),
            `$RuntimeHelper`.POINTER.withName("userData"),
            `$RuntimeHelper`.POINTER.withName("embreeDevice"),
            `$RuntimeHelper`.POINTER.withName("radeonRaysDevice"),
        ).withName("IPLSceneSettings")

        @JvmField
        public val typeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("type"))

        @JvmField
        public val closestHitCallbackHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("closestHitCallback"))

        @JvmField
        public val anyHitCallbackHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("anyHitCallback"))

        @JvmField
        public val batchedClosestHitCallbackHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("batchedClosestHitCallback"))

        @JvmField
        public val batchedAnyHitCallbackHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("batchedAnyHitCallback"))

        @JvmField
        public val userDataHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("userData"))

        @JvmField
        public val embreeDeviceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("embreeDevice"))

        @JvmField
        public val radeonRaysDeviceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("radeonRaysDevice"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLSceneSettings =
            IPLSceneSettings(alloc.allocate(IPLSceneSettings.layout))

        public fun interface closestHitCallback {
            public fun invoke(
                ray: Pointer<IPLRay>,
                minDistance: IPLfloat32,
                maxDistance: IPLfloat32,
                hit: Pointer<IPLHit>,
                userData: Pointer<Unit>,
            )

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(closestHitCallback::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.ofVoid(
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_FLOAT,
                    ValueLayout.JAVA_FLOAT,
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }

        public fun interface anyHitCallback {
            public fun invoke(
                ray: Pointer<IPLRay>,
                minDistance: IPLfloat32,
                maxDistance: IPLfloat32,
                occluded: Pointer<IPLuint8>,
                userData: Pointer<Unit>,
            )

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(anyHitCallback::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.ofVoid(
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_FLOAT,
                    ValueLayout.JAVA_FLOAT,
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }

        public fun interface batchedClosestHitCallback {
            public fun invoke(
                numRays: IPLint32,
                rays: Pointer<IPLRay>,
                minDistances: Pointer<IPLfloat32>,
                maxDistances: Pointer<IPLfloat32>,
                hits: Pointer<IPLHit>,
                userData: Pointer<Unit>,
            )

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(batchedClosestHitCallback::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.ofVoid(
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }

        public fun interface batchedAnyHitCallback {
            public fun invoke(
                numRays: IPLint32,
                rays: Pointer<IPLRay>,
                minDistances: Pointer<IPLfloat32>,
                maxDistances: Pointer<IPLfloat32>,
                occluded: Pointer<IPLuint8>,
                userData: Pointer<Unit>,
            )

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(batchedAnyHitCallback::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.ofVoid(
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }
    }
}
