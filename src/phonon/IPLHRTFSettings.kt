// this file is auto generated by endoqa kotlin ffi, modify it with caution
package phonon

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class IPLHRTFSettings(
    public val `$mem`: MemorySegment,
) {
    public var type: IPLHRTFType
        get() = IPLHRTFType.fromInt(IPLHRTFSettings.typeHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            IPLHRTFSettings.typeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var sofaFileName: Pointer<Byte>
        get() = IPLHRTFSettings.sofaFileNameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLHRTFSettings.sofaFileNameHandle.set(this.`$mem`, 0L, value)
        }

    public var sofaData: Pointer<IPLuint8>
        get() = IPLHRTFSettings.sofaDataHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            IPLHRTFSettings.sofaDataHandle.set(this.`$mem`, 0L, value)
        }

    public var sofaDataSize: Int
        get() = IPLHRTFSettings.sofaDataSizeHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            IPLHRTFSettings.sofaDataSizeHandle.set(this.`$mem`, 0L, value)
        }

    public var volume: Float
        get() = IPLHRTFSettings.volumeHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            IPLHRTFSettings.volumeHandle.set(this.`$mem`, 0L, value)
        }

    public var normType: IPLHRTFNormType
        get() = IPLHRTFNormType.fromInt(IPLHRTFSettings.normTypeHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            IPLHRTFSettings.normTypeHandle.set(this.`$mem`, 0L, value.value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(IPLHRTFSettings.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_INT.withName("type"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("sofaFileName"),
            `$RuntimeHelper`.POINTER.withName("sofaData"),
            ValueLayout.JAVA_INT.withName("sofaDataSize"),
            ValueLayout.JAVA_FLOAT.withName("volume"),
            ValueLayout.JAVA_INT.withName("normType"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
        ).withName("IPLHRTFSettings")

        @JvmField
        public val typeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("type"))

        @JvmField
        public val sofaFileNameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("sofaFileName"))

        @JvmField
        public val sofaDataHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("sofaData"))

        @JvmField
        public val sofaDataSizeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("sofaDataSize"))

        @JvmField
        public val volumeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("volume"))

        @JvmField
        public val normTypeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("normType"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): IPLHRTFSettings =
            IPLHRTFSettings(alloc.allocate(IPLHRTFSettings.layout))
    }
}
